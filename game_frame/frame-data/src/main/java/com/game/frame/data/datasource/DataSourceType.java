package com.game.frame.data.datasource;

/**
 * 数据源类型枚举
 * 
 * 功能说明：
 * - 定义游戏服务器支持的数据源类型，实现读写分离架构
 * - 为动态数据源切换提供类型标识
 * - 支持主从数据库的负载均衡和高可用配置
 * 
 * 设计思路：
 * - 使用枚举类型确保数据源类型的类型安全
 * - 简洁明了的命名，便于理解和使用
 * - 支持后续扩展更多数据源类型(如只读从库、分析库等)
 * 
 * 使用场景：
 * - 写操作使用MASTER主数据源，确保数据一致性
 * - 读操作使用SLAVE从数据源，分担主库压力
 * - 事务性操作强制使用主数据源
 * - 报表查询等非实时操作使用从数据源
 * 
 * 数据库架构：
 * - MASTER: 主数据库，处理所有写操作和重要读操作
 * - SLAVE: 从数据库，处理一般查询操作，数据从主库同步
 * 
 * 性能优化：
 * - 读写分离减少主库压力，提升整体性能
 * - 从库可以配置多个实例，进一步分散读取压力
 * - 支持按业务重要性选择合适的数据源
 * 
 * @author lx
 * @date 2025/06/08
 */
public enum DataSourceType {
    /**
     * 主数据源(Master)
     * 
     * 使用场景：
     * - 所有写操作：INSERT、UPDATE、DELETE
     * - 需要强一致性的读操作
     * - 事务性操作和关键业务逻辑
     * - 实时性要求高的查询操作
     * 
     * 特点：
     * - 数据最新且一致
     * - 支持读写操作
     * - 性能要求较高
     * - 高可用性配置
     */
    MASTER,
    
    /**
     * 从数据源(Slave)
     * 
     * 使用场景：
     * - 一般性的查询操作
     * - 报表统计和数据分析
     * - 允许轻微延迟的读操作
     * - 大量并发的查询请求
     * 
     * 特点：
     * - 只读访问模式
     * - 数据可能有轻微延迟
     * - 分担主库查询压力
     * - 可配置多个实例
     */
    SLAVE
}