package com.game.common.config;

/**
 * 游戏配置表基类
 * 
 * 功能说明：
 * - 为所有游戏配置表提供统一的基础接口和验证机制
 * - 提供ID索引、数据验证、关联检查等基础功能
 * - 确保配置数据的一致性和完整性，避免运行时错误
 * - 支持配置热更新和动态加载机制
 * 
 * 设计思路：
 * - 抽象基类设计，定义配置表的通用接口规范
 * - 强制要求所有配置都有唯一ID，便于索引和查找
 * - 提供可重写的验证方法，支持自定义验证逻辑
 * - 简洁的接口设计，便于配置管理器统一处理
 * 
 * 使用场景：
 * - 游戏装备配置：武器、防具、饰品等装备属性配置
 * - 游戏技能配置：技能效果、冷却时间、消耗等参数配置
 * - 游戏任务配置：任务目标、奖励、前置条件等配置
 * - 游戏关卡配置：地图、怪物、掉落等关卡数据配置
 * 
 * 技术特点：
 * - 抽象方法确保子类必须实现核心功能
 * - 默认验证逻辑可被子类重写扩展
 * - 轻量级设计，不引入额外依赖
 * - 支持配置数据的批量验证和检查
 * 
 * 配置管理：
 * - 配置加载：从JSON、XML或数据库加载配置数据
 * - 配置验证：启动时验证所有配置的完整性
 * - 配置索引：基于ID建立快速查找索引
 * - 热更新：支持运行时重新加载配置
 *
 * @author lx
 * @date 2025/06/08
 */
public abstract class TableConfig {
    
    /**
     * 获取配置ID
     * 
     * 功能说明：
     * - 返回配置项的唯一标识符
     * - 用于配置索引、查找和关联
     * - 所有配置表都必须有唯一的ID标识
     * 
     * 业务规则：
     * - ID必须大于0，0和负数为无效ID
     * - 同一配置表内ID必须唯一，不能重复
     * - ID一旦分配建议不要修改，避免关联数据错乱
     * 
     * 使用场景：
     * - 配置管理器建立ID到配置对象的映射
     * - 其他配置表引用此配置时使用ID
     * - 游戏逻辑中查找特定配置时使用ID
     * 
     * @return int 配置的唯一标识符，必须大于0
     */
    public abstract int getId();
    
    /**
     * 验证配置数据的有效性
     * 
     * 功能说明：
     * - 检查配置数据是否符合业务规则和逻辑约束
     * - 提供基础的ID有效性验证，子类可重写扩展验证逻辑
     * - 在配置加载时被调用，确保数据完整性
     * 
     * 基础验证规则：
     * - ID必须大于0，确保有效的配置标识
     * - 子类可重写此方法添加特定的验证逻辑
     * - 验证失败的配置不会被加载到系统中
     * 
     * 扩展验证(子类可实现)：
     * - 必填字段检查：确保关键属性不为空
     * - 数值范围检查：属性值在合理范围内
     * - 关联性检查：引用的其他配置ID是否存在
     * - 业务逻辑检查：配置组合是否符合游戏规则
     * 
     * 使用时机：
     * - 配置文件加载完成后的验证阶段
     * - 热更新配置时的数据检查
     * - 开发阶段的配置正确性测试
     * 
     * @return boolean true表示配置有效，false表示配置无效
     */
    public boolean validate() {
        return getId() > 0;
    }
}